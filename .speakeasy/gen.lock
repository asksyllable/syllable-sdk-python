lockVersion: 2.0.0
id: a3e2761c-0979-427e-b940-b6de6c04cc0d
management:
  docChecksum: 8e4144acdd43d561fd0adf239f10c540
  docVersion: 0.0.2
  speakeasyVersion: 1.612.1
  generationVersion: 2.695.1
  releaseVersion: 0.36.6
  configChecksum: f50a9e5a6977093fda500b2b475222b4
  repoURL: https://github.com/asksyllable/syllable-sdk-python.git
  installationURL: https://github.com/asksyllable/syllable-sdk-python.git
  published: true
features:
  python:
    additionalDependencies: 1.0.0
    constsAndDefaults: 1.0.5
    core: 5.20.3
    defaultEnabledRetries: 0.2.0
    deprecations: 3.0.2
    devContainers: 3.0.0
    downloadStreams: 1.0.1
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.3.2
    flattening: 3.1.1
    globalSecurity: 3.0.3
    globalSecurityCallbacks: 1.0.0
    globalSecurityFlattening: 1.0.0
    globalServerURLs: 3.1.1
    ignores: 3.0.1
    methodArguments: 1.0.2
    multipartFileContentType: 1.0.0
    nameOverrides: 3.0.1
    nullables: 1.0.1
    responseFormat: 1.0.1
    retries: 3.0.2
    sdkHooks: 1.1.0
    unions: 3.0.4
    uploadStreams: 1.0.0
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .vscode/settings.json
  - USAGE.md
  - docs/errors/httpvalidationerror.md
  - docs/models/action.md
  - docs/models/agentcreate.md
  - docs/models/agentdeleterequest.md
  - docs/models/agentgetbyidrequest.md
  - docs/models/agentlanguage.md
  - docs/models/agentlist.md
  - docs/models/agentlistrequest.md
  - docs/models/agentproperties.md
  - docs/models/agentresponse.md
  - docs/models/agentsttprovider.md
  - docs/models/agenttooldefaults.md
  - docs/models/agenttoolfielddefault.md
  - docs/models/agentupdate.md
  - docs/models/agentvoice.md
  - docs/models/agentvoicedisplayname.md
  - docs/models/agentvoicegender.md
  - docs/models/agentvoicemodel.md
  - docs/models/agentvoicevarname.md
  - docs/models/agentwaitsound.md
  - docs/models/attributes.md
  - docs/models/availabletarget.md
  - docs/models/availabletargetproperties.md
  - docs/models/availabletargetsrequest.md
  - docs/models/batchdetails.md
  - docs/models/batchproperties.md
  - docs/models/batchstatus.md
  - docs/models/bodyinsightsfolderuploadfile.md
  - docs/models/bodyinsightsfolderuploadfilefile.md
  - docs/models/bodyorganizationscreate.md
  - docs/models/bodyorganizationscreatelogo.md
  - docs/models/bodyorganizationsdelete.md
  - docs/models/bodyorganizationsupdate.md
  - docs/models/bodyorganizationsupdatelogo.md
  - docs/models/bodyoutboundbatchdelete.md
  - docs/models/bodyoutboundbatchupload.md
  - docs/models/bodyoutboundbatchuploadfile.md
  - docs/models/campaignproperties.md
  - docs/models/channel.md
  - docs/models/channelconfigview.md
  - docs/models/channelproperties.md
  - docs/models/channelservices.md
  - docs/models/channelslistrequest.md
  - docs/models/channelstwiliogetbyidrequest.md
  - docs/models/channelstwilionumbersaddrequest.md
  - docs/models/channelstwilionumberslistrequest.md
  - docs/models/channelstwilionumbersupdaterequest.md
  - docs/models/channeltargetcreaterequest.md
  - docs/models/channeltargetproperties.md
  - docs/models/channeltargetresponse.md
  - docs/models/channeltargetscreaterequest.md
  - docs/models/channeltargetsdeleterequest.md
  - docs/models/channeltargetsgetbyidrequest.md
  - docs/models/channeltargetslistrequest.md
  - docs/models/channeltargetsupdaterequest.md
  - docs/models/channeltargetupdaterequest.md
  - docs/models/communicationbatch.md
  - docs/models/communicationbatchinput.md
  - docs/models/communicationbatchupdate.md
  - docs/models/communicationrequest.md
  - docs/models/communicationrequestresult.md
  - docs/models/conversation.md
  - docs/models/conversationproperties.md
  - docs/models/conversationslistrequest.md
  - docs/models/createtakeoutresponse.md
  - docs/models/custommessagecreaterequest.md
  - docs/models/custommessagegetbyidrequest.md
  - docs/models/custommessageproperties.md
  - docs/models/custommessageresponse.md
  - docs/models/custommessagerule.md
  - docs/models/custommessagesdeleterequest.md
  - docs/models/custommessageslistrequest.md
  - docs/models/custommessageupdaterequest.md
  - docs/models/dashboard.md
  - docs/models/dashboardproperties.md
  - docs/models/dashboardresponse.md
  - docs/models/dashboardtokenresponse.md
  - docs/models/datasourcecreaterequest.md
  - docs/models/datasourcedetailresponse.md
  - docs/models/datasourcemetadataresponse.md
  - docs/models/datasourceproperties.md
  - docs/models/datasourcesdeleterequest.md
  - docs/models/datasourcesgetbyidrequest.md
  - docs/models/datasourceslistrequest.md
  - docs/models/datasourceupdaterequest.md
  - docs/models/dayofweek.md
  - docs/models/daysofweek.md
  - docs/models/defaults.md
  - docs/models/dialogmessage.md
  - docs/models/dialogrole.md
  - docs/models/dialogtoolcall.md
  - docs/models/event.md
  - docs/models/eventproperties.md
  - docs/models/eventslistrequest.md
  - docs/models/folderdetails.md
  - docs/models/folderstats.md
  - docs/models/generatesessionrecordingurlsrequest.md
  - docs/models/getsessiondatabysessionidrequest.md
  - docs/models/getsessiondatabysidrequest.md
  - docs/models/getsessiontoolcallresultbyidrequest.md
  - docs/models/incidentcreaterequest.md
  - docs/models/incidentdeleterequest.md
  - docs/models/incidentgetbyidrequest.md
  - docs/models/incidentlistrequest.md
  - docs/models/incidentorganizationresponse.md
  - docs/models/incidentproperties.md
  - docs/models/incidentresponse.md
  - docs/models/incidentupdaterequest.md
  - docs/models/insights.md
  - docs/models/insightsfolder.md
  - docs/models/insightsfolderdeleterequest.md
  - docs/models/insightsfolderfilemove.md
  - docs/models/insightsfoldergetbyidrequest.md
  - docs/models/insightsfolderinput.md
  - docs/models/insightsfolderlistrequest.md
  - docs/models/insightsfolderproperties.md
  - docs/models/insightsfolderupdaterequest.md
  - docs/models/insightsfolderuploadfilerequest.md
  - docs/models/insightslistrequest.md
  - docs/models/insightsoutput.md
  - docs/models/insightsproperties.md
  - docs/models/insightstooldeleterequest.md
  - docs/models/insightstoolupdaterequest.md
  - docs/models/insightsuploadfile.md
  - docs/models/insightsuploadfileproperties.md
  - docs/models/insightsuploadlistfilesrequest.md
  - docs/models/insightsuploadmovefilesrequest.md
  - docs/models/insightsworkflowactivaterequest.md
  - docs/models/insightsworkflowdeleterequest.md
  - docs/models/insightsworkflowgetbyidrequest.md
  - docs/models/insightsworkflowinactivaterequest.md
  - docs/models/insightsworkflowlistrequest.md
  - docs/models/insightsworkflowqueuesession.md
  - docs/models/insightsworkflowupdaterequest.md
  - docs/models/insighttooldefinition.md
  - docs/models/insighttoolgetbyidrequest.md
  - docs/models/insighttoolinput.md
  - docs/models/insighttoollistrequest.md
  - docs/models/insighttooloutput.md
  - docs/models/insighttoolproperties.md
  - docs/models/insighttooltestinput.md
  - docs/models/insightworkflowactivate.md
  - docs/models/insightworkflowcondition.md
  - docs/models/insightworkflowestimate.md
  - docs/models/insightworkflowinput.md
  - docs/models/insightworkflowoutput.md
  - docs/models/insightworkflowproperties.md
  - docs/models/inspectlatencyresponse.md
  - docs/models/internaltool.md
  - docs/models/jsonvalue.md
  - docs/models/languagecode.md
  - docs/models/languageconfig.md
  - docs/models/languagegroupagentinfo.md
  - docs/models/languagegroupcreaterequest.md
  - docs/models/languagegroupproperties.md
  - docs/models/languagegroupresponse.md
  - docs/models/languagegroupsdeleterequest.md
  - docs/models/languagegroupsgetbyidrequest.md
  - docs/models/languagegroupslistrequest.md
  - docs/models/languagegroupupdaterequest.md
  - docs/models/latencycategory.md
  - docs/models/latencyentry.md
  - docs/models/latencyunittype.md
  - docs/models/listresponseagentresponse.md
  - docs/models/listresponseavailabletarget.md
  - docs/models/listresponsechannel.md
  - docs/models/listresponsechanneltargetresponse.md
  - docs/models/listresponsecommunicationbatch.md
  - docs/models/listresponseconversation.md
  - docs/models/listresponsecustommessageresponse.md
  - docs/models/listresponsedashboardresponse.md
  - docs/models/listresponsedatasourcemetadataresponse.md
  - docs/models/listresponseevent.md
  - docs/models/listresponseincidentresponse.md
  - docs/models/listresponseinsightsfolder.md
  - docs/models/listresponseinsightsoutput.md
  - docs/models/listresponseinsightsuploadfile.md
  - docs/models/listresponseinsighttooloutput.md
  - docs/models/listresponseinsightworkflowoutput.md
  - docs/models/listresponselanguagegroupresponse.md
  - docs/models/listresponseoutboundcampaign.md
  - docs/models/listresponsepromptresponse.md
  - docs/models/listresponseroleresponse.md
  - docs/models/listresponseserviceresponse.md
  - docs/models/listresponsesession.md
  - docs/models/listresponsesessionlabel.md
  - docs/models/listresponsetoolresponse.md
  - docs/models/listresponseuserresponse.md
  - docs/models/loc.md
  - docs/models/logintype.md
  - docs/models/metadata.md
  - docs/models/orderbydirection.md
  - docs/models/organizationchannelconfig.md
  - docs/models/organizationchannelcreaterequest.md
  - docs/models/organizationchannelupdaterequest.md
  - docs/models/organizationresponse.md
  - docs/models/outboundbatchaddrequest.md
  - docs/models/outboundbatchdeleterequest.md
  - docs/models/outboundbatchgetbyidrequest.md
  - docs/models/outboundbatchlistrequest.md
  - docs/models/outboundbatchremoverequest.md
  - docs/models/outboundbatchresultsrequest.md
  - docs/models/outboundbatchupdaterequest.md
  - docs/models/outboundbatchuploadrequest.md
  - docs/models/outboundcampaign.md
  - docs/models/outboundcampaigndeleterequest.md
  - docs/models/outboundcampaigngetbyidrequest.md
  - docs/models/outboundcampaigninput.md
  - docs/models/outboundcampaignlistrequest.md
  - docs/models/outboundcampaignupdaterequest.md
  - docs/models/permissiongroupresponse.md
  - docs/models/permissionresponse.md
  - docs/models/postgetdashboardrequest.md
  - docs/models/postlistdashboardrequest.md
  - docs/models/promptcreaterequest.md
  - docs/models/prompthistory.md
  - docs/models/prompthistorylinkedtool.md
  - docs/models/promptllmconfig.md
  - docs/models/promptllmprovider.md
  - docs/models/promptproperties.md
  - docs/models/promptresponse.md
  - docs/models/promptsdeleterequest.md
  - docs/models/promptsgetbyidrequest.md
  - docs/models/promptshistoryrequest.md
  - docs/models/promptslistrequest.md
  - docs/models/promptupdaterequest.md
  - docs/models/requeststatus.md
  - docs/models/rolecreaterequest.md
  - docs/models/roleproperties.md
  - docs/models/roleresponse.md
  - docs/models/rolesdeleterequest.md
  - docs/models/rolesgetbyidrequest.md
  - docs/models/roleslistrequest.md
  - docs/models/roleupdaterequest.md
  - docs/models/samplerate.md
  - docs/models/security.md
  - docs/models/servicecreaterequest.md
  - docs/models/servicedeleterequest.md
  - docs/models/servicelistrequest.md
  - docs/models/serviceproperties.md
  - docs/models/serviceresponse.md
  - docs/models/servicesgetbyidrequest.md
  - docs/models/serviceupdaterequest.md
  - docs/models/session.md
  - docs/models/sessionaction.md
  - docs/models/sessiondata.md
  - docs/models/sessionfullsummarygetbyidrequest.md
  - docs/models/sessiongetbyidrequest.md
  - docs/models/sessionlabel.md
  - docs/models/sessionlabelcreate.md
  - docs/models/sessionlabelgetbyidrequest.md
  - docs/models/sessionlabelproperties.md
  - docs/models/sessionlabelslistrequest.md
  - docs/models/sessionlatencygetbyidrequest.md
  - docs/models/sessionmessage.md
  - docs/models/sessionproperties.md
  - docs/models/sessionrecordingresponse.md
  - docs/models/sessionrecordingstreamrequest.md
  - docs/models/sessionslistrequest.md
  - docs/models/sessionsummaryresponse.md
  - docs/models/sessiontext.md
  - docs/models/sessiontranscriptgetbyidrequest.md
  - docs/models/sessiontranscriptionresponse.md
  - docs/models/statictoolparameter.md
  - docs/models/statictoolparametertype.md
  - docs/models/summaryentry.md
  - docs/models/supportedllm.md
  - docs/models/takeoutrequeststatus.md
  - docs/models/takeoutsgetbyjobidrequest.md
  - docs/models/takeoutsgetfilerequest.md
  - docs/models/takeoutstatusresponse.md
  - docs/models/targetmodes.md
  - docs/models/telephonyconfigurations.md
  - docs/models/testmessage.md
  - docs/models/testmessageresponse.md
  - docs/models/toolagentinfo.md
  - docs/models/toolargumentlocation.md
  - docs/models/toolauthtype.md
  - docs/models/toolcreaterequest.md
  - docs/models/tooldefinition.md
  - docs/models/tooldeleterequest.md
  - docs/models/tooldetailresponse.md
  - docs/models/toolfunction.md
  - docs/models/toolgetbynamerequest.md
  - docs/models/toolhttpendpoint.md
  - docs/models/toolhttpmethod.md
  - docs/models/toollistrequest.md
  - docs/models/tooloptions.md
  - docs/models/toolparameterdefault.md
  - docs/models/toolparametertransform.md
  - docs/models/toolparametertransformcondition.md
  - docs/models/toolpromptinfo.md
  - docs/models/toolproperties.md
  - docs/models/toolresponse.md
  - docs/models/toolresultdata.md
  - docs/models/toolupdaterequest.md
  - docs/models/ttsprovider.md
  - docs/models/twiliochannelconfigcreate.md
  - docs/models/twiliochannelconfigupdate.md
  - docs/models/twiliochannelcreaterequest.md
  - docs/models/twiliochannelupdaterequest.md
  - docs/models/twiliolistnumbersresponse.md
  - docs/models/twilionumberaddrequest.md
  - docs/models/twilionumberaddresponse.md
  - docs/models/twilionumberupdaterequest.md
  - docs/models/twilionumberupdateresponse.md
  - docs/models/twiliophonenumber.md
  - docs/models/type.md
  - docs/models/useractivitystatus.md
  - docs/models/usercreaterequest.md
  - docs/models/userdeleterequest.md
  - docs/models/userproperties.md
  - docs/models/userresponse.md
  - docs/models/usersgetbyemailrequest.md
  - docs/models/userslistrequest.md
  - docs/models/userssendemailrequest.md
  - docs/models/userupdaterequest.md
  - docs/models/utils/retryconfig.md
  - docs/models/validationerror.md
  - docs/models/voicesamplecreaterequest.md
  - docs/sdks/agents/README.md
  - docs/sdks/batches/README.md
  - docs/sdks/campaigns/README.md
  - docs/sdks/channels/README.md
  - docs/sdks/conversations/README.md
  - docs/sdks/custommessages/README.md
  - docs/sdks/dashboards/README.md
  - docs/sdks/datasources/README.md
  - docs/sdks/events/README.md
  - docs/sdks/folders/README.md
  - docs/sdks/fullsummary/README.md
  - docs/sdks/incidents/README.md
  - docs/sdks/insightssdk/README.md
  - docs/sdks/insightstools/README.md
  - docs/sdks/languagegroups/README.md
  - docs/sdks/latency/README.md
  - docs/sdks/numbers/README.md
  - docs/sdks/organizations/README.md
  - docs/sdks/outbound/README.md
  - docs/sdks/permissions/README.md
  - docs/sdks/prompts/README.md
  - docs/sdks/roles/README.md
  - docs/sdks/services/README.md
  - docs/sdks/sessiondebug/README.md
  - docs/sdks/sessionlabels/README.md
  - docs/sdks/sessions/README.md
  - docs/sdks/syllablesdk/README.md
  - docs/sdks/takeouts/README.md
  - docs/sdks/targets/README.md
  - docs/sdks/test/README.md
  - docs/sdks/tools/README.md
  - docs/sdks/transcript/README.md
  - docs/sdks/twilio/README.md
  - docs/sdks/users/README.md
  - docs/sdks/v1/README.md
  - docs/sdks/workflows/README.md
  - poetry.toml
  - py.typed
  - pylintrc
  - pyproject.toml
  - scripts/prepare_readme.py
  - scripts/publish.sh
  - src/syllable_sdk/__init__.py
  - src/syllable_sdk/_hooks/__init__.py
  - src/syllable_sdk/_hooks/sdkhooks.py
  - src/syllable_sdk/_hooks/types.py
  - src/syllable_sdk/_version.py
  - src/syllable_sdk/agents.py
  - src/syllable_sdk/basesdk.py
  - src/syllable_sdk/batches.py
  - src/syllable_sdk/campaigns.py
  - src/syllable_sdk/channels.py
  - src/syllable_sdk/conversations.py
  - src/syllable_sdk/custom_messages.py
  - src/syllable_sdk/dashboards.py
  - src/syllable_sdk/data_sources.py
  - src/syllable_sdk/errors/__init__.py
  - src/syllable_sdk/errors/apierror.py
  - src/syllable_sdk/errors/httpvalidationerror.py
  - src/syllable_sdk/errors/no_response_error.py
  - src/syllable_sdk/errors/responsevalidationerror.py
  - src/syllable_sdk/errors/syllablesdkerror.py
  - src/syllable_sdk/events.py
  - src/syllable_sdk/folders.py
  - src/syllable_sdk/full_summary.py
  - src/syllable_sdk/httpclient.py
  - src/syllable_sdk/incidents.py
  - src/syllable_sdk/insights_sdk.py
  - src/syllable_sdk/insights_tools.py
  - src/syllable_sdk/language_groups.py
  - src/syllable_sdk/latency.py
  - src/syllable_sdk/models/__init__.py
  - src/syllable_sdk/models/agent_deleteop.py
  - src/syllable_sdk/models/agent_get_by_idop.py
  - src/syllable_sdk/models/agent_listop.py
  - src/syllable_sdk/models/agentcreate.py
  - src/syllable_sdk/models/agentlanguage.py
  - src/syllable_sdk/models/agentproperties.py
  - src/syllable_sdk/models/agentresponse.py
  - src/syllable_sdk/models/agentsttprovider.py
  - src/syllable_sdk/models/agenttooldefaults.py
  - src/syllable_sdk/models/agenttoolfielddefault.py
  - src/syllable_sdk/models/agentupdate.py
  - src/syllable_sdk/models/agentvoice.py
  - src/syllable_sdk/models/agentvoicedisplayname.py
  - src/syllable_sdk/models/agentvoicegender.py
  - src/syllable_sdk/models/agentvoicemodel.py
  - src/syllable_sdk/models/agentvoicevarname.py
  - src/syllable_sdk/models/agentwaitsound.py
  - src/syllable_sdk/models/available_targetsop.py
  - src/syllable_sdk/models/availabletarget.py
  - src/syllable_sdk/models/availabletargetproperties.py
  - src/syllable_sdk/models/batchdetails.py
  - src/syllable_sdk/models/batchproperties.py
  - src/syllable_sdk/models/batchstatus.py
  - src/syllable_sdk/models/body_insights_folder_upload_file.py
  - src/syllable_sdk/models/body_organizations_create.py
  - src/syllable_sdk/models/body_organizations_delete.py
  - src/syllable_sdk/models/body_organizations_update.py
  - src/syllable_sdk/models/body_outbound_batch_delete.py
  - src/syllable_sdk/models/body_outbound_batch_upload.py
  - src/syllable_sdk/models/campaignproperties.py
  - src/syllable_sdk/models/channel.py
  - src/syllable_sdk/models/channel_targets_createop.py
  - src/syllable_sdk/models/channel_targets_deleteop.py
  - src/syllable_sdk/models/channel_targets_get_by_idop.py
  - src/syllable_sdk/models/channel_targets_listop.py
  - src/syllable_sdk/models/channel_targets_updateop.py
  - src/syllable_sdk/models/channelconfigview.py
  - src/syllable_sdk/models/channelproperties.py
  - src/syllable_sdk/models/channels_listop.py
  - src/syllable_sdk/models/channels_twilio_get_by_idop.py
  - src/syllable_sdk/models/channels_twilio_numbers_addop.py
  - src/syllable_sdk/models/channels_twilio_numbers_listop.py
  - src/syllable_sdk/models/channels_twilio_numbers_updateop.py
  - src/syllable_sdk/models/channelservices.py
  - src/syllable_sdk/models/channeltargetcreaterequest.py
  - src/syllable_sdk/models/channeltargetproperties.py
  - src/syllable_sdk/models/channeltargetresponse.py
  - src/syllable_sdk/models/channeltargetupdaterequest.py
  - src/syllable_sdk/models/communicationbatch.py
  - src/syllable_sdk/models/communicationbatchinput.py
  - src/syllable_sdk/models/communicationbatchupdate.py
  - src/syllable_sdk/models/communicationrequest.py
  - src/syllable_sdk/models/communicationrequestresult.py
  - src/syllable_sdk/models/conversation.py
  - src/syllable_sdk/models/conversationproperties.py
  - src/syllable_sdk/models/conversations_listop.py
  - src/syllable_sdk/models/createtakeoutresponse.py
  - src/syllable_sdk/models/custom_message_get_by_idop.py
  - src/syllable_sdk/models/custom_messages_deleteop.py
  - src/syllable_sdk/models/custom_messages_listop.py
  - src/syllable_sdk/models/custommessagecreaterequest.py
  - src/syllable_sdk/models/custommessageproperties.py
  - src/syllable_sdk/models/custommessageresponse.py
  - src/syllable_sdk/models/custommessagerule.py
  - src/syllable_sdk/models/custommessageupdaterequest.py
  - src/syllable_sdk/models/dashboard.py
  - src/syllable_sdk/models/dashboardproperties.py
  - src/syllable_sdk/models/dashboardresponse.py
  - src/syllable_sdk/models/dashboardtokenresponse.py
  - src/syllable_sdk/models/data_sources_deleteop.py
  - src/syllable_sdk/models/data_sources_get_by_idop.py
  - src/syllable_sdk/models/data_sources_listop.py
  - src/syllable_sdk/models/datasourcecreaterequest.py
  - src/syllable_sdk/models/datasourcedetailresponse.py
  - src/syllable_sdk/models/datasourcemetadataresponse.py
  - src/syllable_sdk/models/datasourceproperties.py
  - src/syllable_sdk/models/datasourceupdaterequest.py
  - src/syllable_sdk/models/dayofweek.py
  - src/syllable_sdk/models/daysofweek.py
  - src/syllable_sdk/models/dialogmessage.py
  - src/syllable_sdk/models/dialogrole.py
  - src/syllable_sdk/models/dialogtoolcall.py
  - src/syllable_sdk/models/event.py
  - src/syllable_sdk/models/eventproperties.py
  - src/syllable_sdk/models/events_listop.py
  - src/syllable_sdk/models/folderdetails.py
  - src/syllable_sdk/models/generate_session_recording_urlsop.py
  - src/syllable_sdk/models/get_session_data_by_session_idop.py
  - src/syllable_sdk/models/get_session_data_by_sidop.py
  - src/syllable_sdk/models/get_session_tool_call_result_by_idop.py
  - src/syllable_sdk/models/incident_deleteop.py
  - src/syllable_sdk/models/incident_get_by_idop.py
  - src/syllable_sdk/models/incident_listop.py
  - src/syllable_sdk/models/incidentcreaterequest.py
  - src/syllable_sdk/models/incidentorganizationresponse.py
  - src/syllable_sdk/models/incidentproperties.py
  - src/syllable_sdk/models/incidentresponse.py
  - src/syllable_sdk/models/incidentupdaterequest.py
  - src/syllable_sdk/models/insight_tool_get_by_idop.py
  - src/syllable_sdk/models/insight_tool_listop.py
  - src/syllable_sdk/models/insights_folder_deleteop.py
  - src/syllable_sdk/models/insights_folder_get_by_idop.py
  - src/syllable_sdk/models/insights_folder_listop.py
  - src/syllable_sdk/models/insights_folder_updateop.py
  - src/syllable_sdk/models/insights_folder_upload_fileop.py
  - src/syllable_sdk/models/insights_listop.py
  - src/syllable_sdk/models/insights_tool_deleteop.py
  - src/syllable_sdk/models/insights_tool_updateop.py
  - src/syllable_sdk/models/insights_upload_list_filesop.py
  - src/syllable_sdk/models/insights_upload_move_filesop.py
  - src/syllable_sdk/models/insights_workflow_activateop.py
  - src/syllable_sdk/models/insights_workflow_deleteop.py
  - src/syllable_sdk/models/insights_workflow_get_by_idop.py
  - src/syllable_sdk/models/insights_workflow_inactivateop.py
  - src/syllable_sdk/models/insights_workflow_listop.py
  - src/syllable_sdk/models/insights_workflow_updateop.py
  - src/syllable_sdk/models/insightsfolder.py
  - src/syllable_sdk/models/insightsfolderfilemove.py
  - src/syllable_sdk/models/insightsfolderinput.py
  - src/syllable_sdk/models/insightsfolderproperties.py
  - src/syllable_sdk/models/insightsoutput.py
  - src/syllable_sdk/models/insightsproperties.py
  - src/syllable_sdk/models/insightsuploadfile.py
  - src/syllable_sdk/models/insightsuploadfileproperties.py
  - src/syllable_sdk/models/insightsworkflowqueuesession.py
  - src/syllable_sdk/models/insighttooldefinition.py
  - src/syllable_sdk/models/insighttoolinput.py
  - src/syllable_sdk/models/insighttooloutput.py
  - src/syllable_sdk/models/insighttoolproperties.py
  - src/syllable_sdk/models/insighttooltestinput.py
  - src/syllable_sdk/models/insightworkflowactivate.py
  - src/syllable_sdk/models/insightworkflowcondition.py
  - src/syllable_sdk/models/insightworkflowestimate.py
  - src/syllable_sdk/models/insightworkflowinput.py
  - src/syllable_sdk/models/insightworkflowoutput.py
  - src/syllable_sdk/models/insightworkflowproperties.py
  - src/syllable_sdk/models/inspectlatencyresponse.py
  - src/syllable_sdk/models/internaltool.py
  - src/syllable_sdk/models/language_groups_deleteop.py
  - src/syllable_sdk/models/language_groups_get_by_idop.py
  - src/syllable_sdk/models/language_groups_listop.py
  - src/syllable_sdk/models/languagecode.py
  - src/syllable_sdk/models/languageconfig.py
  - src/syllable_sdk/models/languagegroupagentinfo.py
  - src/syllable_sdk/models/languagegroupcreaterequest.py
  - src/syllable_sdk/models/languagegroupproperties.py
  - src/syllable_sdk/models/languagegroupresponse.py
  - src/syllable_sdk/models/languagegroupupdaterequest.py
  - src/syllable_sdk/models/latencycategory.py
  - src/syllable_sdk/models/latencyentry.py
  - src/syllable_sdk/models/latencyunittype.py
  - src/syllable_sdk/models/listresponse_agentresponse_.py
  - src/syllable_sdk/models/listresponse_availabletarget_.py
  - src/syllable_sdk/models/listresponse_channel_.py
  - src/syllable_sdk/models/listresponse_channeltargetresponse_.py
  - src/syllable_sdk/models/listresponse_communicationbatch_.py
  - src/syllable_sdk/models/listresponse_conversation_.py
  - src/syllable_sdk/models/listresponse_custommessageresponse_.py
  - src/syllable_sdk/models/listresponse_dashboardresponse_.py
  - src/syllable_sdk/models/listresponse_datasourcemetadataresponse_.py
  - src/syllable_sdk/models/listresponse_event_.py
  - src/syllable_sdk/models/listresponse_incidentresponse_.py
  - src/syllable_sdk/models/listresponse_insightsfolder_.py
  - src/syllable_sdk/models/listresponse_insightsoutput_.py
  - src/syllable_sdk/models/listresponse_insightsuploadfile_.py
  - src/syllable_sdk/models/listresponse_insighttooloutput_.py
  - src/syllable_sdk/models/listresponse_insightworkflowoutput_.py
  - src/syllable_sdk/models/listresponse_languagegroupresponse_.py
  - src/syllable_sdk/models/listresponse_outboundcampaign_.py
  - src/syllable_sdk/models/listresponse_promptresponse_.py
  - src/syllable_sdk/models/listresponse_roleresponse_.py
  - src/syllable_sdk/models/listresponse_serviceresponse_.py
  - src/syllable_sdk/models/listresponse_session_.py
  - src/syllable_sdk/models/listresponse_sessionlabel_.py
  - src/syllable_sdk/models/listresponse_toolresponse_.py
  - src/syllable_sdk/models/listresponse_userresponse_.py
  - src/syllable_sdk/models/logintype.py
  - src/syllable_sdk/models/orderbydirection.py
  - src/syllable_sdk/models/organizationchannelconfig.py
  - src/syllable_sdk/models/organizationchannelcreaterequest.py
  - src/syllable_sdk/models/organizationchannelupdaterequest.py
  - src/syllable_sdk/models/organizationresponse.py
  - src/syllable_sdk/models/outbound_batch_addop.py
  - src/syllable_sdk/models/outbound_batch_deleteop.py
  - src/syllable_sdk/models/outbound_batch_get_by_idop.py
  - src/syllable_sdk/models/outbound_batch_listop.py
  - src/syllable_sdk/models/outbound_batch_removeop.py
  - src/syllable_sdk/models/outbound_batch_resultsop.py
  - src/syllable_sdk/models/outbound_batch_updateop.py
  - src/syllable_sdk/models/outbound_batch_uploadop.py
  - src/syllable_sdk/models/outbound_campaign_deleteop.py
  - src/syllable_sdk/models/outbound_campaign_get_by_idop.py
  - src/syllable_sdk/models/outbound_campaign_listop.py
  - src/syllable_sdk/models/outbound_campaign_updateop.py
  - src/syllable_sdk/models/outboundcampaign.py
  - src/syllable_sdk/models/outboundcampaigninput.py
  - src/syllable_sdk/models/permissiongroupresponse.py
  - src/syllable_sdk/models/permissionresponse.py
  - src/syllable_sdk/models/post_get_dashboardop.py
  - src/syllable_sdk/models/post_list_dashboardop.py
  - src/syllable_sdk/models/promptcreaterequest.py
  - src/syllable_sdk/models/prompthistory.py
  - src/syllable_sdk/models/prompthistorylinkedtool.py
  - src/syllable_sdk/models/promptllmconfig.py
  - src/syllable_sdk/models/promptllmprovider.py
  - src/syllable_sdk/models/promptproperties.py
  - src/syllable_sdk/models/promptresponse.py
  - src/syllable_sdk/models/prompts_deleteop.py
  - src/syllable_sdk/models/prompts_get_by_idop.py
  - src/syllable_sdk/models/prompts_historyop.py
  - src/syllable_sdk/models/prompts_listop.py
  - src/syllable_sdk/models/promptupdaterequest.py
  - src/syllable_sdk/models/requeststatus.py
  - src/syllable_sdk/models/rolecreaterequest.py
  - src/syllable_sdk/models/roleproperties.py
  - src/syllable_sdk/models/roleresponse.py
  - src/syllable_sdk/models/roles_deleteop.py
  - src/syllable_sdk/models/roles_get_by_idop.py
  - src/syllable_sdk/models/roles_listop.py
  - src/syllable_sdk/models/roleupdaterequest.py
  - src/syllable_sdk/models/security.py
  - src/syllable_sdk/models/service_deleteop.py
  - src/syllable_sdk/models/service_listop.py
  - src/syllable_sdk/models/servicecreaterequest.py
  - src/syllable_sdk/models/serviceproperties.py
  - src/syllable_sdk/models/serviceresponse.py
  - src/syllable_sdk/models/services_get_by_idop.py
  - src/syllable_sdk/models/serviceupdaterequest.py
  - src/syllable_sdk/models/session.py
  - src/syllable_sdk/models/session_full_summary_get_by_idop.py
  - src/syllable_sdk/models/session_get_by_idop.py
  - src/syllable_sdk/models/session_label_get_by_idop.py
  - src/syllable_sdk/models/session_labels_listop.py
  - src/syllable_sdk/models/session_latency_get_by_idop.py
  - src/syllable_sdk/models/session_recording_streamop.py
  - src/syllable_sdk/models/session_transcript_get_by_idop.py
  - src/syllable_sdk/models/sessionaction.py
  - src/syllable_sdk/models/sessiondata.py
  - src/syllable_sdk/models/sessionlabel.py
  - src/syllable_sdk/models/sessionlabelcreate.py
  - src/syllable_sdk/models/sessionlabelproperties.py
  - src/syllable_sdk/models/sessionmessage.py
  - src/syllable_sdk/models/sessionproperties.py
  - src/syllable_sdk/models/sessionrecordingresponse.py
  - src/syllable_sdk/models/sessions_listop.py
  - src/syllable_sdk/models/sessionsummaryresponse.py
  - src/syllable_sdk/models/sessiontext.py
  - src/syllable_sdk/models/sessiontranscriptionresponse.py
  - src/syllable_sdk/models/statictoolparameter.py
  - src/syllable_sdk/models/statictoolparametertype.py
  - src/syllable_sdk/models/summaryentry.py
  - src/syllable_sdk/models/supportedllm.py
  - src/syllable_sdk/models/takeoutrequeststatus.py
  - src/syllable_sdk/models/takeouts_get_by_job_idop.py
  - src/syllable_sdk/models/takeouts_get_fileop.py
  - src/syllable_sdk/models/takeoutstatusresponse.py
  - src/syllable_sdk/models/targetmodes.py
  - src/syllable_sdk/models/telephonyconfigurations.py
  - src/syllable_sdk/models/testmessage.py
  - src/syllable_sdk/models/testmessageresponse.py
  - src/syllable_sdk/models/tool_deleteop.py
  - src/syllable_sdk/models/tool_get_by_nameop.py
  - src/syllable_sdk/models/tool_listop.py
  - src/syllable_sdk/models/toolagentinfo.py
  - src/syllable_sdk/models/toolargumentlocation.py
  - src/syllable_sdk/models/toolauthtype.py
  - src/syllable_sdk/models/toolcreaterequest.py
  - src/syllable_sdk/models/tooldefinition.py
  - src/syllable_sdk/models/tooldetailresponse.py
  - src/syllable_sdk/models/toolfunction.py
  - src/syllable_sdk/models/toolhttpendpoint.py
  - src/syllable_sdk/models/toolhttpmethod.py
  - src/syllable_sdk/models/tooloptions.py
  - src/syllable_sdk/models/toolparameterdefault.py
  - src/syllable_sdk/models/toolparametertransform.py
  - src/syllable_sdk/models/toolparametertransformcondition.py
  - src/syllable_sdk/models/toolpromptinfo.py
  - src/syllable_sdk/models/toolproperties.py
  - src/syllable_sdk/models/toolresponse.py
  - src/syllable_sdk/models/toolresultdata.py
  - src/syllable_sdk/models/toolupdaterequest.py
  - src/syllable_sdk/models/ttsprovider.py
  - src/syllable_sdk/models/twiliochannelconfigcreate.py
  - src/syllable_sdk/models/twiliochannelconfigupdate.py
  - src/syllable_sdk/models/twiliochannelcreaterequest.py
  - src/syllable_sdk/models/twiliochannelupdaterequest.py
  - src/syllable_sdk/models/twiliolistnumbersresponse.py
  - src/syllable_sdk/models/twilionumberaddrequest.py
  - src/syllable_sdk/models/twilionumberaddresponse.py
  - src/syllable_sdk/models/twilionumberupdaterequest.py
  - src/syllable_sdk/models/twilionumberupdateresponse.py
  - src/syllable_sdk/models/twiliophonenumber.py
  - src/syllable_sdk/models/useractivitystatus.py
  - src/syllable_sdk/models/usercreaterequest.py
  - src/syllable_sdk/models/userdeleterequest.py
  - src/syllable_sdk/models/userproperties.py
  - src/syllable_sdk/models/userresponse.py
  - src/syllable_sdk/models/users_get_by_emailop.py
  - src/syllable_sdk/models/users_listop.py
  - src/syllable_sdk/models/users_send_emailop.py
  - src/syllable_sdk/models/userupdaterequest.py
  - src/syllable_sdk/models/validationerror.py
  - src/syllable_sdk/models/voicesamplecreaterequest.py
  - src/syllable_sdk/numbers.py
  - src/syllable_sdk/organizations.py
  - src/syllable_sdk/outbound.py
  - src/syllable_sdk/permissions.py
  - src/syllable_sdk/prompts.py
  - src/syllable_sdk/py.typed
  - src/syllable_sdk/roles.py
  - src/syllable_sdk/sdk.py
  - src/syllable_sdk/sdkconfiguration.py
  - src/syllable_sdk/services.py
  - src/syllable_sdk/session_debug.py
  - src/syllable_sdk/session_labels.py
  - src/syllable_sdk/sessions.py
  - src/syllable_sdk/takeouts.py
  - src/syllable_sdk/targets.py
  - src/syllable_sdk/test.py
  - src/syllable_sdk/tools.py
  - src/syllable_sdk/transcript.py
  - src/syllable_sdk/twilio.py
  - src/syllable_sdk/types/__init__.py
  - src/syllable_sdk/types/basemodel.py
  - src/syllable_sdk/users.py
  - src/syllable_sdk/utils/__init__.py
  - src/syllable_sdk/utils/annotations.py
  - src/syllable_sdk/utils/datetimes.py
  - src/syllable_sdk/utils/enums.py
  - src/syllable_sdk/utils/eventstreaming.py
  - src/syllable_sdk/utils/forms.py
  - src/syllable_sdk/utils/headers.py
  - src/syllable_sdk/utils/logger.py
  - src/syllable_sdk/utils/metadata.py
  - src/syllable_sdk/utils/queryparams.py
  - src/syllable_sdk/utils/requestbodies.py
  - src/syllable_sdk/utils/retries.py
  - src/syllable_sdk/utils/security.py
  - src/syllable_sdk/utils/serializers.py
  - src/syllable_sdk/utils/unmarshal_json_response.py
  - src/syllable_sdk/utils/url.py
  - src/syllable_sdk/utils/values.py
  - src/syllable_sdk/v1.py
  - src/syllable_sdk/workflows.py
examples:
  agent_list:
    speakeasy-default-agent-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  agent_create:
    speakeasy-default-agent-create:
      requestBody:
        application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound"}
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-03-31T17:52:14.243Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-03-31T17:52:14.243Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-31T04:19:10.318Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-31T04:19:10.318Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-31T04:19:10.318Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_update:
    speakeasy-default-agent-update:
      requestBody:
        application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1}
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-16T06:26:49.939Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-16T06:26:49.939Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-16T06:26:49.939Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-06-04T19:48:36.324Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-06-04T19:48:36.324Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-06-04T19:48:36.324Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_get_by_id:
    speakeasy-default-agent-get-by-id:
      parameters:
        path:
          agent_id: 910445
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-02-17T19:18:47.758Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-02-17T19:18:47.758Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-02-17T19:18:47.758Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-10-16T11:40:01.629Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-10-16T11:40:01.629Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_delete:
    speakeasy-default-agent-delete:
      parameters:
        path:
          agent_id: 78115
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  agent_get_available_voices:
    speakeasy-default-agent-get-available-voices:
      responses:
        "200":
          application/json: [{"provider": "OpenAI", "display_name": "es-US-Neural2-B", "var_name": "wavenet:female/es-US-Neural2-A", "gender": "male", "model": "WaveNet", "supported_languages": [{"name": "English", "code": "en-US"}], "deprecated": false}, {"provider": "OpenAI", "display_name": "es-US-Neural2-B", "var_name": "wavenet:female/es-US-Neural2-A", "gender": "male", "model": "WaveNet", "supported_languages": [{"name": "English", "code": "en-US"}], "deprecated": false}, {"provider": "OpenAI", "display_name": "es-US-Neural2-B", "var_name": "wavenet:female/es-US-Neural2-A", "gender": "male", "model": "WaveNet", "supported_languages": [{"name": "English", "code": "en-US"}], "deprecated": false}]
  send_test_message:
    speakeasy-default-send-test-message:
      requestBody:
        application/json: {"service_name": "<value>", "source": "user@email.com", "text": "Hello", "test_id": "<id>", "agent_id": "<id>", "session_start": false}
      responses:
        "200":
          application/json: {"test_id": "<id>", "agent_id": "<id>", "response": "<value>"}
        "422":
          application/json: {}
  channels_list:
    speakeasy-default-channels-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "[\"chat\",\"voice\"]", "is_system_channel": false, "id": 820233}, {"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "[\"chat\",\"voice\"]", "is_system_channel": false, "id": 820233}, {"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "[\"chat\",\"voice\"]", "is_system_channel": false, "id": 820233}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_delete:
    speakeasy-default-channel-targets-delete:
      parameters:
        path:
          channel_id: "<id>"
        query:
          target_id: "<id>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  channels_twilio_get_by_id:
    speakeasy-default-channels-twilio-get-by-id:
      parameters:
        path:
          channel_id: 627671
      responses:
        "200":
          application/json: {"name": "syllable-webchat", "channel_service": "sip", "supported_modes": "chat,voice", "is_system_channel": false, "id": 730258, "config": {"telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
        "422":
          application/json: {}
  channels_twilio_update:
    speakeasy-default-channels-twilio-update:
      requestBody:
        application/json: {"id": 1, "name": "syllable-webchat", "config": {"account_sid": "AC123...", "auth_token": "sometoken"}}
      responses:
        "200":
          application/json: {"name": "syllable-webchat", "channel_service": "sip", "supported_modes": "chat,voice", "is_system_channel": false, "id": 964580, "config": {"telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
        "422":
          application/json: {}
  channels_twilio_create:
    speakeasy-default-channels-twilio-create:
      requestBody:
        application/json: {"name": "syllable-webchat", "config": {"account_sid": "AC123...", "auth_token": "sometoken"}}
      responses:
        "200":
          application/json: {"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "chat,voice", "is_system_channel": false, "id": 402205, "config": {"telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
        "422":
          application/json: {}
  channels_twilio_numbers_add:
    speakeasy-default-channels-twilio-numbers-add:
      parameters:
        path:
          channel_id: 314558
      requestBody:
        application/json: {"friendly_name": "Support Line", "area_code": "804"}
      responses:
        "200":
          application/json: {"phone_number": "+18042221111"}
        "422":
          application/json: {}
  available_targets:
    speakeasy-default-available-targets:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["target"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"organization_id": 1, "channel_id": 1, "channel_name": "Twilio", "target": "+19995551234"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_list:
    speakeasy-default-channel-targets-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["agent_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V1", "wait_sound": "Call Center", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-07-12T17:11:31.419Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "en-US-Neural2-J", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V1", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-07-12T17:11:31.419Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Nova", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Deepgram Nova 2", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-07-12T17:11:31.419Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-29T10:50:33.534Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Brian", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_create:
    speakeasy-default-channel-targets-create:
      parameters:
        path:
          channel_id: 824809
      requestBody:
        application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true}
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-06-08T22:54:56.575Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-06-08T22:54:56.575Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-25T13:44:12.237Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  channel_targets_get_by_id:
    speakeasy-default-channel-targets-get-by-id:
      parameters:
        path:
          channel_id: 184507
          target_id: 235358
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-01-24T02:11:26.427Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-12T14:01:28.606Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-12T14:01:28.606Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  channel_targets_update:
    speakeasy-default-channel-targets-update:
      parameters:
        path:
          channel_id: 508167
          target_id: 880236
      requestBody:
        application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1}
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "labels": ["Information", "Weather"], "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"some-header": "some-value"}, "agent_initiated": false, "stt_provider": "Google STT V2 (Chirp 2)", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-29T21:36:35.836Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-29T21:36:35.836Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-29T21:36:35.836Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-08-19T06:00:20.470Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  conversations_list:
    speakeasy-default-conversations-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["agent_name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  data_sources_list:
    speakeasy-default-data-sources-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2025-11-16T05:33:40.955Z", "last_updated_by": "user@email.com"}, {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2025-11-16T05:33:40.955Z", "last_updated_by": "user@email.com"}, {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2025-11-16T05:33:40.955Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  data_sources_create:
    speakeasy-default-data-sources-create:
      requestBody:
        application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "text": "The following are names and addresses of pizza shops.\n\nCool Pizza, 123 Main St.\n\nReally Good Pizza, 456 Water St.\n\nThe Best Pizza, 789 Circle Dr."}
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2024-12-22T07:07:27.798Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_update:
    speakeasy-default-data-sources-update:
      requestBody:
        application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "text": "The following are names and addresses of pizza shops.\n\nCool Pizza, 123 Main St.\n\nReally Good Pizza, 456 Water St.\n\nThe Best Pizza, 789 Circle Dr."}
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2023-03-07T19:05:58.255Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_get_by_id:
    speakeasy-default-data-sources-get-by-id:
      parameters:
        path:
          data_source_id: 87219
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2024-09-02T06:11:53.026Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_delete:
    speakeasy-default-data-sources-delete:
      parameters:
        path:
          data_source_id: 509584
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  events_list:
    speakeasy-default-events-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["description"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"timestamp": "2023-03-14T07:33:32.146Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}, {"timestamp": "2023-03-14T07:33:32.146Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}, {"timestamp": "2023-03-14T07:33:32.146Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  incident_list:
    speakeasy-default-incident-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["updated_at"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  incident_create:
    speakeasy-default-incident-create:
      requestBody:
        application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A"}
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  incident_update:
    speakeasy-default-incident-update:
      requestBody:
        application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  incident_get_organizations:
    speakeasy-default-incident-get-organizations:
      responses:
        "200":
          application/json: [{"id": 114143, "name": "<value>", "display_name": "Dion.Miller4"}, {"id": 114143, "name": "<value>", "display_name": "Dion.Miller4"}]
  incident_get_by_id:
    speakeasy-default-incident-get-by-id:
      parameters:
        path:
          incident_id: 835824
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  incident_delete:
    speakeasy-default-incident-delete:
      parameters:
        path:
          incident_id: 400877
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  insights_list:
    speakeasy-default-insights-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["upload_file_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"id": 1, "session_id": 12341, "upload_file_id": 12535, "insight_tool_id": 34531, "insight_tool_version": 1, "insight_key": "summary", "string_value": "This is a summary of the call", "numeric_value": 1, "json_value": {"content": " was there anything else that I can assist you with other than this", "role": "assistant", "start_time": 289}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z"}, {"id": 1, "session_id": 12341, "upload_file_id": 12535, "insight_tool_id": 34531, "insight_tool_version": 1, "insight_key": "summary", "string_value": "This is a summary of the call", "numeric_value": 1, "json_value": {"content": " was there anything else that I can assist you with other than this", "role": "assistant", "start_time": 289}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  insights_folder_list:
    speakeasy-default-insights-folder-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints", "id": 182764, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints", "id": 182764, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  insights_folder_create:
    speakeasy-default-insights-folder-create:
      requestBody:
        application/json: {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints"}
      responses:
        "200":
          application/json: {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints", "id": 182764, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_folder_get_by_id:
    speakeasy-default-insights-folder-get-by-id:
      parameters:
        path:
          folder_id: 982079
      responses:
        "200":
          application/json: {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints", "id": 182764, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com", "folder_stats": {"count": 10, "total_duration": "10:00:00", "total_size": "213MB"}}
        "422":
          application/json: {}
  insights_folder_delete:
    speakeasy-default-insights-folder-delete:
      parameters:
        path:
          folder_id: 410792
      responses:
        "200":
          application/json: false
        "422":
          application/json: {}
  insights_folder_update:
    speakeasy-default-insights-folder-update:
      parameters:
        path:
          folder_id: 567518
      requestBody:
        application/json: {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints"}
      responses:
        "200":
          application/json: {"name": "customer-complaints", "label": "support", "description": "Call recordings related to customer complaints", "id": 182764, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_folder_upload_file:
    speakeasy-default-insights-folder-upload-file:
      parameters:
        path:
          folder_id: 444923
        query:
          call_id: "<id>"
      responses:
        "200":
          application/json: {"id": 182764, "folder_id": 182764, "filename": "customer-complaints.wav", "object_key": "UPLOAD_CALL_ID/recording/2025/04/22/15/00/ce7d212e-80b0-4f0b-9e01-74322f146611.mp3", "call_id": "12345", "agent_number": "1234567890", "customer_number": "0987654321", "duration": 305.5, "start_time": "2025-09-07T00:00:00Z", "end_time": "2025-09-08T00:00:00Z", "error_message": "File not found", "metadata": {"duration": "00:10:00", "size": "10MB"}, "created_at": "2025-09-07T00:00:00Z"}
        "422":
          application/json: {}
  insights_upload_list_files:
    speakeasy-default-insights-upload-list-files:
      parameters:
        path:
          folder_id: 55293
        query:
          page: 0
          limit: 25
          search_fields: ["filename"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"id": 182764, "folder_id": 182764, "filename": "customer-complaints.wav", "object_key": "UPLOAD_CALL_ID/recording/2025/04/22/15/00/ce7d212e-80b0-4f0b-9e01-74322f146611.mp3", "call_id": "12345", "agent_number": "1234567890", "customer_number": "0987654321", "duration": 305.5, "start_time": "2025-05-15T00:00:00Z", "end_time": "2025-05-16T00:00:00Z", "error_message": "File not found", "metadata": {"duration": "00:10:00", "size": "10MB"}, "created_at": "2025-05-15T00:00:00Z"}, {"id": 182764, "folder_id": 182764, "filename": "customer-complaints.wav", "object_key": "UPLOAD_CALL_ID/recording/2025/04/22/15/00/ce7d212e-80b0-4f0b-9e01-74322f146611.mp3", "call_id": "12345", "agent_number": "1234567890", "customer_number": "0987654321", "duration": 305.5, "start_time": "2025-05-15T00:00:00Z", "end_time": "2025-05-16T00:00:00Z", "error_message": "File not found", "metadata": {"duration": "00:10:00", "size": "10MB"}, "created_at": "2025-05-15T00:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  insights_upload_move_files:
    speakeasy-default-insights-upload-move-files:
      parameters:
        path:
          folder_id: 815114
      requestBody:
        application/json: {"destination_folder_id": 182764, "file_id_list": [12334, 23445, 34556]}
      responses:
        "200":
          application/json: [{"id": 182764, "folder_id": 182764, "filename": "customer-complaints.wav", "object_key": "UPLOAD_CALL_ID/recording/2025/04/22/15/00/ce7d212e-80b0-4f0b-9e01-74322f146611.mp3", "call_id": "12345", "agent_number": "1234567890", "customer_number": "0987654321", "duration": 305.5, "start_time": "2025-05-15T00:00:00Z", "end_time": "2025-05-16T00:00:00Z", "error_message": "File not found", "metadata": {"duration": "00:10:00", "size": "10MB"}, "created_at": "2025-05-15T00:00:00Z"}, {"id": 182764, "folder_id": 182764, "filename": "customer-complaints.wav", "object_key": "UPLOAD_CALL_ID/recording/2025/04/22/15/00/ce7d212e-80b0-4f0b-9e01-74322f146611.mp3", "call_id": "12345", "agent_number": "1234567890", "customer_number": "0987654321", "duration": 305.5, "start_time": "2025-05-15T00:00:00Z", "end_time": "2025-05-16T00:00:00Z", "error_message": "File not found", "metadata": {"duration": "00:10:00", "size": "10MB"}, "created_at": "2025-05-15T00:00:00Z"}]
        "422":
          application/json: {}
  insights_workflow_list:
    speakeasy-default-insights-workflow-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "summary-workflow", "source": "transfer", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 2, "agent_list": ["866324", "826325"], "prompt_list": ["123324"], "folder_list": [16754, 67535]}, "start_datetime": "2025-05-15T00:00:00Z", "end_datetime": "2025-05-16T00:00:00Z", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  insights_workflow_create:
    speakeasy-default-insights-workflow-create:
      requestBody:
        application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z"}
      responses:
        "200":
          application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_workflow_get_by_id:
    speakeasy-default-insights-workflow-get-by-id:
      parameters:
        path:
          workflow_id: 788857
      responses:
        "200":
          application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_workflow_update:
    speakeasy-default-insights-workflow-update:
      parameters:
        path:
          workflow_id: 766381
      requestBody:
        application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z"}
      responses:
        "200":
          application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z", "id": 1, "insight_tools": [], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_workflow_delete:
    speakeasy-default-insights-workflow-delete:
      parameters:
        path:
          workflow_id: 609419
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  insights_workflow_inactivate:
    speakeasy-default-insights-workflow-inactivate:
      parameters:
        path:
          workflow_id: 248768
      responses:
        "200":
          application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_workflow_activate:
    speakeasy-default-insights-workflow-activate:
      parameters:
        path:
          workflow_id: 303095
      requestBody:
        application/json: {"is_acknowledged": true, "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}}
      responses:
        "200":
          application/json: {"name": "summary-workflow", "source": "agent", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {"min_duration": 120, "max_duration": 600, "sample_rate": 0.1, "agent_list": [866324, 826325], "prompt_list": ["123324"], "folder_list": [16754, 67535], "sheet_info": {"sheet_id": "1AGOCYz05AZYYOMzow2EYlgdDXSXaWIhyA3-zCxBm4go", "sheet_name": "Q1 Sales Data"}}, "start_datetime": "2025-09-07T00:00:00Z", "end_datetime": "2025-09-08T00:00:00Z", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "status": "ACTIVE", "estimate": {"backfill_count": 100, "backfill_duration": 1000, "estimated_daily_count": 10, "estimated_daily_duration": 3674.11, "estimated_daily_cost": 45.25, "estimated_backfill_cost": 4561}, "queue_count": 10, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_workflow_queue_work:
    speakeasy-default-insights-workflow-queue-work:
      requestBody:
        application/json: {"workflow_name": "summary-workflow", "session_id_list": [12334, 23445, 34556], "file_id_list": [1234, 1678, 2224]}
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  insight_tool_list:
    speakeasy-default-insight-tool-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-05-15T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  insights_tool_create:
    speakeasy-default-insights-tool-create:
      requestBody:
        application/json: {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1}
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insight_tool_get_by_id:
    speakeasy-default-insight-tool-get-by-id:
      parameters:
        path:
          tool_id: "<id>"
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_tool_delete:
    speakeasy-default-insights-tool-delete:
      parameters:
        path:
          tool_id: 770449
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  insights_tool_update:
    speakeasy-default-insights-tool-update:
      parameters:
        path:
          tool_id: 368362
      requestBody:
        application/json: {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1}
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "This tool uses GPT4.1 to generate a summary of the call", "version": 1, "tool_arguments": {"prompt": "Provide a concise, accurate summary of the conversation's key points, focusing on the user's goal and how the agent responded"}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, "created_at": "2025-09-07T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  insights_tool_test:
    speakeasy-default-insights-tool-test:
      requestBody:
        application/json: {"tool_name": "summary-tool", "session_id": 283467, "upload_file_id": 283467}
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  insight_tool_get_definitions:
    speakeasy-default-insight-tool-get-definitions:
      responses:
        "200":
          application/json: [{"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}, {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {"prompt": "string"}, "tool_result_set": {"summary": "string"}}]
  custom_messages_list:
    speakeasy-default-custom-messages-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  custom_messages_create:
    speakeasy-default-custom-messages-create:
      requestBody:
        application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "type": "greeting"}
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_messages_update:
    speakeasy-default-custom-messages-update:
      requestBody:
        application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "type": "greeting"}
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_message_get_by_id:
    speakeasy-default-custom-message-get-by-id:
      parameters:
        path:
          custom_message_id: 909433
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on weekends", "time_range_start": "09:00", "time_range_end": "17:00", "days_of_week": ["sa", "su"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed on weekends."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_messages_delete:
    speakeasy-default-custom-messages-delete:
      parameters:
        path:
          custom_message_id: 729986
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  prompts_list:
    speakeasy-default-prompts-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  prompts_create:
    speakeasy-default-prompts-create:
      requestBody:
        application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "tools": [], "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "include_default_tools": true}
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-22T10:31:00.767Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-22T10:31:00.767Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-22T10:31:00.767Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_update:
    speakeasy-default-prompts-update:
      requestBody:
        application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "tools": [], "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "include_default_tools": true}
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-05T01:33:54.532Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-05T01:33:54.532Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_get_by_id:
    speakeasy-default-prompts-get-by-id:
      parameters:
        path:
          prompt_id: 417330
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "version_number": 1, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-17T21:54:38.623Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-17T21:54:38.623Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-17T21:54:38.623Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_delete:
    speakeasy-default-prompts-delete:
      parameters:
        path:
          prompt_id: 982839
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  prompts_history:
    speakeasy-default-prompts-history:
      parameters:
        path:
          prompt_id: 922849
      responses:
        "200":
          application/json: [{"timestamp": "2024-01-01T12:00:00Z", "prompt_id": "1", "version_number": 1, "prompt_text": "You are a weather agent. Answer the user's questions about weather and nothing else.", "prompt_description": "Prompt for a weather agent.", "prompt_name": "Weather Agent Prompt", "comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "user_email": "user@email.com", "is_pre_enhancements": true}]
        "422":
          application/json: {}
  prompt_get_supported_llms:
    speakeasy-default-prompt-get-supported-llms:
      responses:
        "200":
          application/json: [{"model": "gpt-4o", "display_name": "GPT-4o", "version": "2024-05-13", "api_version": "2024-06-01", "deprecated": false}]
  service_list:
    speakeasy-default-service-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  service_create:
    speakeasy-default-service-create:
      requestBody:
        application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "auth_type": "basic", "auth_values": {"password": "my-password", "username": "my-username"}}
      responses:
        "200":
          application/json: {"id": 1, "name": "Weather tools", "description": "Service containing tools for fetching weather information", "auth_type": "basic", "auth_value_keys": ["username", "password"], "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  service_update:
    speakeasy-default-service-update:
      requestBody:
        application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "auth_type": "basic", "auth_values": {"password": "my-password", "username": "my-username"}, "id": 1, "last_updated_comments": "Updated description to correct typo"}
      responses:
        "200":
          application/json: {"id": 1, "name": "Weather tools", "description": "Service containing tools for fetching weather information", "auth_type": "basic", "auth_value_keys": ["username", "password"], "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  services_get_by_id:
    speakeasy-default-services-get-by-id:
      parameters:
        path:
          service_id: 902529
      responses:
        "200":
          application/json: {"id": 1, "name": "Weather tools", "description": "Service containing tools for fetching weather information", "auth_type": "basic", "auth_value_keys": ["username", "password"], "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  service_delete:
    speakeasy-default-service-delete:
      parameters:
        path:
          service_id: 754999
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  session_label_get_by_id:
    speakeasy-default-session-label-get-by-id:
      parameters:
        path:
          session_label_id: 491550
      responses:
        "200":
          application/json: {"session_id": 1, "type": "auto-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}
        "422":
          application/json: {}
  session_label_create:
    speakeasy-default-session-label-create:
      requestBody:
        application/json: {"session_id": 1, "type": "auto-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"]}
      responses:
        "200":
          application/json: {"session_id": 1, "type": "auto-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}
        "422":
          application/json: {}
  session_labels_list:
    speakeasy-default-session-labels-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["code"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"session_id": 1, "type": "auto-rating", "code": "BAD", "user_email": "user@email.com", "issue_categories": ["Speech transcription (STT)"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  sessions_list:
    speakeasy-default-sessions-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["conversation_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  session_get_by_id:
    speakeasy-default-session-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"timestamp": "2024-02-29T07:05:06.902Z", "channel_manager_service": "hedy", "channel_manager_type": "voice_sip_v1", "source": "+18042221111"}
        "422":
          application/json: {}
  generate_session_recording_urls:
    speakeasy-default-generate-session-recording-urls:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"session_id": "1", "recordings": ["https://example.com/recording1.mp3", "https://example.com/recording2.mp3"]}
        "422":
          application/json: {}
  session_recording_stream:
    speakeasy-default-session-recording-stream:
      parameters:
        query:
          token: "<value>"
      responses:
        "200":
          application/octet-stream: "x-file: example.file"
        "422":
          application/json: {}
  session_transcript_get_by_id:
    speakeasy-default-session-transcript-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"session_id": "<id>", "transcription": [], "actions": [{"timestamp": "2025-02-23T17:04:12.391Z"}]}
        "422":
          application/json: {}
  session_full_summary_get_by_id:
    speakeasy-default-session-full-summary-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"summary": "The customer service agent successfully assisted the caller with their inquiry and the call ended positively.", "rating": "Good"}
        "422":
          application/json: {}
  session_latency_get_by_id:
    speakeasy-default-session-latency-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"session_id": "<id>", "timeline": [{"timestamp": "2024-12-15T20:04:57.169Z", "measurement_start": "2025-12-18T02:12:37.477Z", "category": "llm", "label": "<value>", "unit_type": "minutes", "value": 5098.28, "value_str": "<value>", "time_delta": "<value>"}]}
        "422":
          application/json: {}
  get_session_data_by_sid:
    speakeasy-default-get-session-data-by-sid:
      parameters:
        path:
          channel_manager_service: "<value>"
          channel_manager_sid: "<id>"
      responses:
        "200":
          application/json: {"session_id": 123, "source": "+1234567890", "target": "+1239876543", "is_test": false, "messages": [{"role": "agent", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}, {"role": "agent", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}]}
        "422":
          application/json: {}
  get_session_data_by_session_id:
    speakeasy-default-get-session-data-by-session-id:
      parameters:
        path:
          session_id: 303182
      responses:
        "200":
          application/json: {"session_id": 123, "source": "+1234567890", "target": "+1239876543", "is_test": false, "messages": [{"role": "user", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}, {"role": "user", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}]}
        "422":
          application/json: {}
  get_session_tool_call_result_by_id:
    speakeasy-default-get-session-tool-call-result-by-id:
      parameters:
        path:
          session_id: 832133
          tool_call_id: "<id>"
      responses:
        "200":
          application/json: {"tool_name": "general_information_web", "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}}
        "422":
          application/json: {}
  tool_list:
    speakeasy-default-tool-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-09T17:04:28.951Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-09T17:04:28.951Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-01-09T17:04:28.951Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  tool_create:
    speakeasy-default-tool-create:
      requestBody:
        application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in Celsius or Fahrenheit", "required": false, "type": "string", "default": "fahrenheit"}]}, "service_id": 1}
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in Celsius or Fahrenheit", "required": false, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-12-21T08:46:13.463Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  tool_update:
    speakeasy-default-tool-update:
      requestBody:
        application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in Celsius or Fahrenheit", "required": false, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint"}
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in Celsius or Fahrenheit", "required": false, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-07-10T20:40:21.134Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  tool_get_by_name:
    speakeasy-default-tool-get-by-name:
      parameters:
        path:
          tool_name: "<value>"
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value", "operator": "eq"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in Celsius or Fahrenheit", "required": false, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-28T05:56:54.084Z", "last_updated_by": "user@email.com", "fields": ["<value 1>", "<value 2>", "<value 3>"]}
        "422":
          application/json: {}
  tool_delete:
    speakeasy-default-tool-delete:
      parameters:
        path:
          tool_name: "<value>"
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  post_list_dashboard:
    speakeasy-default-post-list-dashboard:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}, {"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}, {"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  post_get_dashboard:
    speakeasy-default-post-get-dashboard:
      parameters:
        query:
          dashboard_name: "<value>"
      responses:
        "200":
          application/json: {"embedded_id": "976ef486-d1ea-49c7-ba81-18e955d80286", "guest_token": "some-guest-token", "name": "session_summary", "display_name": "Session Summary", "superset_url": "https://somesuperseturl.com", "rank": 0, "label": "dashboard"}
        "422":
          application/json: {}
  post_session_events_dashboard:
    speakeasy-default-post-session-events-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://bossy-forager.name"}
  post_session_summary_dashboard:
    speakeasy-default-post-session-summary-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://tidy-hammock.com/"}
  post_session_transfers_dashboard:
    speakeasy-default-post-session-transfers-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://other-icebreaker.biz/"}
  post_sessions_dashboard:
    speakeasy-default-post-sessions-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://warped-meal.biz"}
  outbound_batch_list:
    speakeasy-default-outbound-batch-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["last_updated_at"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"batch_id": "20250516.9", "campaign_id": 1, "expires_on": "2025-05-17T00:00:00Z", "paused": true, "upload_filename": "LATE_PAYMENTS_20250401.csv", "created_at": "2025-05-16T00:00:00Z", "deleted_at": "2025-05-16T00:00:00Z", "deleted_reason": "User request", "last_updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com", "error_message": "Missing required fields"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  outbound_batch_create:
    speakeasy-default-outbound-batch-create:
      requestBody:
        application/json: {"batch_id": "20250908.9", "campaign_id": 1, "expires_on": "2025-09-09T00:00:00Z", "paused": true}
      responses:
        "200":
          application/json: {"batch_id": "20250908.9", "campaign_id": 1, "expires_on": "2025-09-09T00:00:00Z", "paused": true, "upload_filename": "LATE_PAYMENTS_20250401.csv", "created_at": "2025-09-08T00:00:00Z", "deleted_at": "2025-09-08T00:00:00Z", "deleted_reason": "User request", "last_updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com", "error_message": "Invalid file format"}
        "422":
          application/json: {}
  outbound_batch_get_by_id:
    speakeasy-default-outbound-batch-get-by-id:
      parameters:
        path:
          batch_id: "<id>"
      responses:
        "200":
          application/json: {"batch_id": "20250908.9", "campaign_id": 1, "expires_on": "2025-09-09T00:00:00Z", "paused": true, "upload_filename": "LATE_PAYMENTS_20250401.csv", "created_at": "2025-09-08T00:00:00Z", "deleted_at": "2025-09-08T00:00:00Z", "deleted_reason": "User request", "last_updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com", "error_message": "Invalid file format", "status_counts": {"CANCELED": 7, "CONNECTED": 100, "DUPLICATE": 5, "FAILED": 10, "INITIATED": 20, "PENDING": 10}}
        "422":
          application/json: {}
  outbound_batch_update:
    speakeasy-default-outbound-batch-update:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: {"paused": true, "expires_on": "2027-01-01T06:00:00Z"}
      responses:
        "200":
          application/json: {"batch_id": "20250908.9", "campaign_id": 1, "expires_on": "2025-09-09T00:00:00Z", "paused": true, "upload_filename": "LATE_PAYMENTS_20250401.csv", "created_at": "2025-09-08T00:00:00Z", "deleted_at": "2025-09-08T00:00:00Z", "deleted_reason": "User request", "last_updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com", "error_message": "Invalid file format"}
        "422":
          application/json: {}
  outbound_batch_delete:
    speakeasy-default-outbound-batch-delete:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/x-www-form-urlencoded: {"delete_reason": "<value>"}
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  outbound_batch_upload:
    speakeasy-default-outbound-batch-upload:
      parameters:
        path:
          batch_id: "<id>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  outbound_batch_results:
    speakeasy-default-outbound-batch-results:
      parameters:
        path:
          batch_id: "<id>"
        query: {}
      responses:
        "200":
          application/json: [{"reference_id": "12345", "target": "512-555-1234", "request_variables": {}, "channel_manager_sid": "LMc4b16a9df2ce33d84b3d30581fe6598c", "created_at": "2025-05-15T00:00:00Z", "sent_at": "2025-05-16T00:00:00Z", "attempt_count": 0, "session_id": 1, "conversation_id": 1, "channel_manager_status": "BUSY", "insights_status": "PROCESSING"}]
        "422":
          application/json: {}
  outbound_batch_add:
    speakeasy-default-outbound-batch-add:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: {"reference_id": "12345", "target": "512-555-1234", "request_variables": {}}
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  outbound_batch_remove:
    speakeasy-default-outbound-batch-remove:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: ["<value 1>", "<value 2>"]
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  outbound_campaign_list:
    speakeasy-default-outbound-campaign-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "test", "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "account@email.com", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "7d", "active_days": ["sun"], "id": 1, "agent_id": null, "created_at": "2025-05-16T00:00:00Z", "updated_at": "2025-05-16T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  outbound_campaign_create:
    speakeasy-default-outbound-campaign-create:
      requestBody:
        application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "labels": ["test", "demo"], "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "+19032900844", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "30m", "active_days": ["mon", "tue", "wed", "thu", "fri"]}
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "labels": ["test", "demo"], "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "+19032900844", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "30m", "active_days": ["mon", "tue", "wed", "thu", "fri"], "id": 1, "agent_id": null, "created_at": "2025-09-08T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  outbound_campaign_get_by_id:
    speakeasy-default-outbound-campaign-get-by-id:
      parameters:
        path:
          campaign_id: 11227
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "labels": ["test", "demo"], "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "+19032900844", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "30m", "active_days": ["mon", "tue", "wed", "thu", "fri"], "id": 1, "agent_id": null, "created_at": "2025-09-08T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  outbound_campaign_update:
    speakeasy-default-outbound-campaign-update:
      parameters:
        path:
          campaign_id: 187717
      requestBody:
        application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "labels": ["test", "demo"], "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "+19032900844", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "30m", "active_days": ["mon", "tue", "wed", "thu", "fri"]}
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "labels": ["test", "demo"], "campaign_variables": {"key": "value", "key2": "value2"}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "source": "+19032900844", "caller_id": "19995551234", "hourly_rate": 25, "retry_count": 1, "retry_interval": "30m", "active_days": ["mon", "tue", "wed", "thu", "fri"], "id": 1, "agent_id": null, "created_at": "2025-09-08T00:00:00Z", "updated_at": "2025-09-08T00:00:00Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  outbound_campaign_delete:
    speakeasy-default-outbound-campaign-delete:
      parameters:
        path:
          campaign_id: 439537
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  language_groups_list:
    speakeasy-default-language-groups-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "River", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}, {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Sarah", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}, {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Sage", "voice_speed": 1, "voice_pitch": 0, "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  language_groups_create:
    speakeasy-default-language-groups-create:
      requestBody:
        application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true}
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  language_groups_update:
    speakeasy-default-language-groups-update:
      requestBody:
        application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support."}
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  language_groups_get_by_id:
    speakeasy-default-language-groups-get-by-id:
      parameters:
        path:
          language_group_id: 453313
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "es-US-Neural2-B", "dtmf_code": 2}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422":
          application/json: {}
  language_groups_delete:
    speakeasy-default-language-groups-delete:
      parameters:
        path:
          language_group_id: 572805
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  language_groups_create_voice_sample:
    speakeasy-default-language-groups-create-voice-sample:
      requestBody:
        application/json: {"language_code": "zh-CN", "voice_provider": "Google", "voice_display_name": "en-US-Neural2-F", "voice_speed": 1, "voice_pitch": 0}
      responses:
        "200":
          application/octet-stream: "x-file: example.file"
        "422":
          application/json: {}
  takeouts_create:
    speakeasy-default-takeouts-create:
      responses:
        "200":
          application/json: {"job_id": "<id>", "created_at": "2025-02-02T11:15:17.802Z"}
  takeouts_get_by_job_id:
    speakeasy-default-takeouts-get-by-job-id:
      parameters:
        path:
          job_id: "<id>"
      responses:
        "200":
          application/json: {"job_id": "<id>", "status": "in_progress", "updated_at": "2023-03-29T17:20:00.412Z"}
        "422":
          application/json: {}
  takeouts_get_file:
    speakeasy-default-takeouts-get-file:
      parameters:
        path:
          job_id: "<id>"
          file_name: "example.file"
      responses:
        "200":
          application/json: "<value>"
          application/zip: "<value>"
        "422":
          application/json: {}
  users_delete_account:
    speakeasy-default-users-delete-account:
      responses:
        "200":
          application/json: "<value>"
  permissions_list:
    speakeasy-default-permissions-list:
      responses:
        "200":
          application/json: [{"name": "organizations_read", "description": "Fetch agent information", "permissions": [{"name": "agents_read", "display_name": "View", "description": "Fetch agent information"}]}, {"name": "organizations_read", "description": "Fetch agent information", "permissions": [{"name": "agents_read", "display_name": "View", "description": "Fetch agent information"}]}, {"name": "organizations_read", "description": "Fetch agent information", "permissions": []}]
  roles_list:
    speakeasy-default-roles-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "prompt_engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"], "id": 1, "last_updated_comments": "Updated to add delete permission", "is_system_role": false, "last_updated": "2025-06-13T22:39:20.757Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  roles_create:
    speakeasy-default-roles-create:
      requestBody:
        application/json: {"name": "Prompt Engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"]}
      responses:
        "200":
          application/json: {"name": "Prompt Engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"], "id": 1, "last_updated_comments": "Updated to add delete permission", "is_system_role": false, "last_updated": "2024-10-26T05:36:43.695Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  roles_update:
    speakeasy-default-roles-update:
      requestBody:
        application/json: {"name": "Prompt Engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"], "id": 1, "last_updated_comments": "Updated to add delete permission"}
      responses:
        "200":
          application/json: {"name": "Prompt Engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"], "id": 1, "last_updated_comments": "Updated to add delete permission", "is_system_role": false, "last_updated": "2024-03-18T03:22:34.251Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  roles_get_by_id:
    speakeasy-default-roles-get-by-id:
      parameters:
        path:
          role_id: 324660
      responses:
        "200":
          application/json: {"name": "Prompt Engineer", "description": "Role for users who can fetch and change prompts", "permissions": ["prompts_read", "prompts_write", "prompts_delete"], "id": 1, "last_updated_comments": "Updated to add delete permission", "is_system_role": false, "last_updated": "2024-11-12T10:57:00.366Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  roles_delete:
    speakeasy-default-roles-delete:
      parameters:
        path:
          role_id: 458987
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  channels_twilio_numbers_update:
    speakeasy-default-channels-twilio-numbers-update:
      parameters:
        path:
          channel_id: 815949
      requestBody:
        application/json: {"friendly_name": "Support Line", "phone_sid": "PN123"}
      responses:
        "200":
          application/json: {"phone_number": "+18042221111"}
        "422":
          application/json: {}
  channels_twilio_numbers_list:
    speakeasy-default-channels-twilio-numbers-list:
      parameters:
        path:
          channel_id: 739627
      responses:
        "200":
          application/json: {"phone_numbers": [{"sid": "PN123", "phone_number": "+19876543210", "friendly_name": "Test number", "trunk_sid": "TK123"}]}
        "422":
          application/json: {}
  users_list:
    speakeasy-default-users-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["role_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"email": "user@email.com", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "admin", "email_sent": true, "activity_status": "active", "last_updated": "2023-05-14T13:30:57.305Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}, {"email": "user@email.com", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "admin", "email_sent": true, "activity_status": "active", "last_updated": "2023-05-14T13:30:57.305Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}, {"email": "user@email.com", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "admin", "email_sent": true, "activity_status": "not_invited", "last_updated": "2023-05-14T13:30:57.305Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  users_create:
    speakeasy-default-users-create:
      requestBody:
        application/json: {"email": "user@syllable.ai", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "login_type": "username_and_password", "skip_auth": false}
      responses:
        "200":
          application/json: {"email": "user@syllable.ai", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "Admin", "email_sent": true, "activity_status": "invited", "last_updated": "2024-06-21T05:54:26.670Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}
        "422":
          application/json: {}
  users_update:
    speakeasy-default-users-update:
      requestBody:
        application/json: {"email": "user@syllable.ai", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned"}
      responses:
        "200":
          application/json: {"email": "user@syllable.ai", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "Admin", "email_sent": true, "activity_status": "invited", "last_updated": "2024-09-29T21:34:27.623Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}
        "422":
          application/json: {}
  users_delete:
    speakeasy-default-users-delete:
      requestBody:
        application/json: {"email": "user@syllable.ai", "reason": "User left the organization"}
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  users_get_by_email:
    speakeasy-default-users-get-by-email:
      parameters:
        path:
          user_email: "<value>"
      responses:
        "200":
          application/json: {"email": "user@syllable.ai", "first_name": "Jane", "last_name": "Smith", "role_id": 1, "last_updated_comments": "Updated to change which role was assigned", "id": 1, "role_name": "Admin", "email_sent": true, "activity_status": "invited", "last_updated": "2024-09-14T02:53:37.916Z", "last_updated_by": "admin@email.com", "last_session_at": "2025-01-01T12:00:00Z"}
        "422":
          application/json: {}
  organizations_get:
    speakeasy-default-organizations-get:
      responses:
        "200":
          application/json: {"display_name": "My Great Org", "description": "An organization that does great things with agentic AI.", "domains": "mygreatorg.com,myothergreatorg.org", "id": 1, "last_updated_comments": "Updated to add an additional domain", "slug": "my-great-org", "last_updated": "2025-07-17T21:31:09.914Z", "logo_url": "https://image.png"}
  organizations_update:
    speakeasy-default-organizations-update:
      requestBody:
        multipart/form-data: {"display_name": "My Great Org", "description": "An organization that does great things with agentic AI", "domains": "mygreatorg.com,mygreatorg.org", "update_comments": "Updated the organization to add a new domain"}
      responses:
        "200":
          application/json: {"display_name": "My Great Org", "description": "An organization that does great things with agentic AI.", "domains": "mygreatorg.com,myothergreatorg.org", "id": 1, "last_updated_comments": "Updated to add an additional domain", "slug": "my-great-org", "last_updated": "2024-05-09T13:26:35.066Z", "logo_url": "https://image.png"}
        "422":
          application/json: {}
  organizations_create:
    speakeasy-default-organizations-create:
      requestBody:
        multipart/form-data: {"logo": "x-file: example.file", "display_name": "My Great Org", "description": "An organization that does great things with agentic AI", "domains": "mygreatorg.com,mygreatorg.org"}
      responses:
        "200":
          application/json: {"display_name": "My Great Org", "description": "An organization that does great things with agentic AI.", "domains": "mygreatorg.com,myothergreatorg.org", "id": 1, "last_updated_comments": "Updated to add an additional domain", "slug": "my-great-org", "last_updated": "2023-11-14T09:08:12.354Z", "logo_url": "https://image.png"}
        "422":
          application/json: {}
  organizations_delete:
    speakeasy-default-organizations-delete:
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  users_send_email:
    speakeasy-default-users-send-email:
      parameters:
        path:
          user_email: "<value>"
        query:
          skip_auth: false
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  channels_create:
    speakeasy-default-channels-create:
      requestBody:
        application/json: {"name": "twilio", "channel_service": "sip", "supported_modes": "chat,voice", "is_system_channel": false, "config": {"account_sid": "AC123...", "auth_token": "sometoken", "telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
      responses:
        "200":
          application/json: {"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "chat,voice", "is_system_channel": false, "id": 354216, "config": {"telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
        "422":
          application/json: {}
  channels_update:
    speakeasy-default-channels-update:
      requestBody:
        application/json: {"name": "twilio", "channel_service": "sip", "supported_modes": "chat,voice", "is_system_channel": false, "config": {"account_sid": "AC123...", "auth_token": "sometoken", "telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}, "id": 1}
      responses:
        "200":
          application/json: {"name": "syllable-webchat", "channel_service": "twilio", "supported_modes": "chat,voice", "is_system_channel": false, "id": 769881, "config": {"telephony": {"pre_input_timeout": 1.2, "overall_input_timeout": 20}}}
        "422":
          application/json: {}
examplesVersion: 1.0.2
generatedTests: {}
