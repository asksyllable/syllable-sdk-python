"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .matchtype import MatchType
from pydantic import model_serializer
from syllable_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


LanguageTypedDict = TypeAliasType("LanguageTypedDict", Union[str, List[str]])


Language = TypeAliasType("Language", Union[str, List[str]])


class PronunciationOverrideTypedDict(TypedDict):
    r"""A single text replacement rule."""

    text: str
    replacement: str
    language: NotRequired[Nullable[LanguageTypedDict]]
    provider: NotRequired[Nullable[str]]
    voice: NotRequired[Nullable[str]]
    match_type: NotRequired[MatchType]
    r"""Matching strategy for override text."""
    match_options: NotRequired[List[str]]
    enabled: NotRequired[bool]
    notes: NotRequired[Nullable[str]]


class PronunciationOverride(BaseModel):
    r"""A single text replacement rule."""

    text: str

    replacement: str

    language: OptionalNullable[Language] = UNSET

    provider: OptionalNullable[str] = UNSET

    voice: OptionalNullable[str] = UNSET

    match_type: Optional[MatchType] = None
    r"""Matching strategy for override text."""

    match_options: Optional[List[str]] = None

    enabled: Optional[bool] = True

    notes: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "language",
            "provider",
            "voice",
            "match_type",
            "match_options",
            "enabled",
            "notes",
        ]
        nullable_fields = ["language", "provider", "voice", "notes"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
